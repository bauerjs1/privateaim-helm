## Global variables
global:
  node:
    ingress:
      ## @param global.node.ingress.enabled Toggle whether ingress should be enabled
      enabled: false
      ## @param global.node.ingress.enabled Host name to be assigned to the Node UI (/) and Hub Adapter API (/api)
      hostname: ""
  keycloak:
    ## @param global.keycloak.hostname Hostname for a separate instance of keycloak. Overrides the /keycloak subpath
    ## Leave this blank unless you want to use your own IDP
    hostname: ""

env: production

## For defining ingress specific metadata
ingress:
  ## @param ingress.enabled Enable ingress record generation for the Node UI
  ##
  enabled: false
  ## @param ingress.hostname Default host for the ingress record (evaluated as template)
  ##
  hostname: ""
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.path Default file path for the ingress hostname
  ##
  path: "/"

  annotations: {}
  className: ""
  # Specify a tls secret to enable TLS for the given hostname
  tlsSecretName: ""

## Keycloak related information
idp:
  ## @param idp.debug If true, the clientId and clientSecret will use pre-defined values
  ## The clientSecret will be defined using the "static" k8s secret key
  debug: false
  ## @param idp.clientId Keycloak client ID for this service
  clientId: node-ui
  ## @param idp.clientSecret Keycloak client secret. Ignored if `idp.existingSecret` is provided
  ## If not defined and no existingSecret provided, a random string is generated
  clientSecret: ""
  ## @param idp.existingSecret Existing k8s secret containing Keycloak secret for this client
  ## idp.existingSecretKey should also be defined for custom k8s secret. Defaults to hub-adapter-kc-secret
  existingSecret: ""
  ## @param idp.existingSecretKey Key where the Keycloak secret is being stored inside the existing k8s secret
  existingSecretKey: ""
  ## @param idp.realm Keycloak realm that the client exists in
  realm: flame
  ## @param idp.host URL to keycloak service
  ## Will be inferred using the Release.Name if not defined
  host: ""
  ## @param idp.service Service name of keycloak
  ## Will be inferred using the Release.Name if not defined
  service: ""

## Downstream node services
node:
  ## @param node.adapter Hub adapter endpoint.
  ## This will overwrite the global.node.ingress.host generated path if provided!
  adapter: ""

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/privateaim/node-ui
  # Overrides the image tag whose default is the chart appVersion.
  tag: prod
  # This sets the pull policy for images.
  pullPolicy: Always

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  runAsNonRoot: true
  privileged: false
  allowPrivilegeEscalation: false
  capabilities:
    drop: [ALL]

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe: &probe
  httpGet:
    path: /healthz
    port: ui
  failureThreshold: 3
  periodSeconds: 60
  initialDelaySeconds: 60
readinessProbe: *probe

# Additional environment variables on the output Deployment definition.
extraEnv: []
# - name: FOO
#   value: bar

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}
tolerations: []
affinity: {}
